AWSTemplateFormatVersion: '2010-09-09'
Description: AWS VPC Infrastructure

Parameters:
  VpcCidr:
    Type: String
    Description: "VPC CIDR block"
    Default: 10.0.0.0/24

  VpcPrivateSubnet1Cidr:
    Type: String
    Description: "VPC private subnet 1 CIDR block"
    Default: 10.0.0.0/26

  VpcPrivateSubnet2Cidr:
    Type: String
    Description: "VPC private subnet 2 CIDR block"
    Default: 10.0.0.64/26

  VpcPrivateSubnet3Cidr:
    Type: String
    Description: "VPC private subnet 3 CIDR block"
    Default: 10.0.0.128/26

  VpcPublicSubnet1Cidr:
    Type: String
    Description: "VPC public subnet 1 CIDR block"
    Default: 10.0.0.208/28

  VpcPublicSubnet2Cidr:
    Type: String
    Description: "VPC public subnet 2 CIDR block"
    Default: 10.0.0.224/28

  VpcPublicSubnet3Cidr:
    Type: String
    Description: "VPC public subnet 3 CIDR block"
    Default: 10.0.0.240/28

  VpcName:
    Type: String
    Description: "VPC Name"
    Default: "Account VPC"

  EnableNatGateway:
    Type: String
    Description: "Enable NAT Gateway for private subnets"
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

Conditions:
  NatGatewayEnabled: !Equals [!Ref EnableNatGateway, "true"]

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'Internet Gateway - ${Vpc}'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub 'Public Route Table - ${Vpc}'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Private Subnets
  ## Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref VpcPrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ['Private Subnet ${AZ} - ${VPC}', { 'AZ': !Select [0, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ['Private Subnet Route Table ${AZ} - ${VPC}', { 'AZ': !Select [0, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet1NatEip:
    Type: AWS::EC2::EIP
    Condition: NatGatewayEnabled
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ['NAT Gateway EIP ${AZ} - ${VPC}', { 'AZ': !Select [0, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet1NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Condition: NatGatewayEnabled
    Properties:
      AllocationId: !GetAtt PrivateSubnet1NatEip.AllocationId
      SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: !Sub ['NAT Gateway ${AZ} - ${VPC}', { 'AZ': !Select [0, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet1DefaultRoute:
    Type: 'AWS::EC2::Route'
    Condition: NatGatewayEnabled
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PrivateSubnet1NatGateway

  ## Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref VpcPrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ['Private Subnet ${AZ} - ${VPC}', { 'AZ': !Select [1, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ['Private Subnet Route Table ${AZ} - ${VPC}', { 'AZ': !Select [1, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet2NatEip:
    Type: AWS::EC2::EIP
    Condition: NatGatewayEnabled
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ['NAT Gateway EIP ${AZ} - ${VPC}', { 'AZ': !Select [1, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet2NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Condition: NatGatewayEnabled
    Properties:
      AllocationId: !GetAtt PrivateSubnet2NatEip.AllocationId
      SubnetId: !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ['NAT Gateway ${AZ} - ${VPC}', { 'AZ': !Select [1, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet2DefaultRoute:
    Type: 'AWS::EC2::Route'
    Condition: NatGatewayEnabled
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PrivateSubnet2NatGateway

  ## Private Subnet 3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref VpcPrivateSubnet3Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ['Private Subnet ${AZ} - ${VPC}', { 'AZ': !Select [2, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet3RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ['Private Subnet Route Table ${AZ} - ${VPC}', { 'AZ': !Select [2, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      SubnetId: !Ref PrivateSubnet3

  PrivateSubnet3NatEip:
    Type: AWS::EC2::EIP
    Condition: NatGatewayEnabled
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ['NAT Gateway EIP ${AZ} - ${VPC}', { 'AZ': !Select [2, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet3NatGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: InternetGatewayAttachment
    Condition: NatGatewayEnabled
    Properties:
      AllocationId: !GetAtt PrivateSubnet3NatEip.AllocationId
      SubnetId: !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: !Sub ['NAT Gateway ${AZ} - ${VPC}', { 'AZ': !Select [2, !GetAZs ""], 'VPC': !Ref Vpc }]

  PrivateSubnet3DefaultRoute:
    Type: 'AWS::EC2::Route'
    Condition: NatGatewayEnabled
    Properties:
      RouteTableId: !Ref PrivateSubnet3RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PrivateSubnet3NatGateway


  # Public Subnets
  ## Public Subnet 1
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref VpcPublicSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ['Public Subnet ${AZ} - ${VPC}', { 'AZ': !Select [0, !GetAZs ""], 'VPC': !Ref Vpc }]

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  ## Public Subnet 2
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref VpcPublicSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ['Public Subnet ${AZ} - ${VPC}', { 'AZ': !Select [1, !GetAZs ""], 'VPC': !Ref Vpc }]

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ## Public Subnet 3
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref VpcPublicSubnet3Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ['Public Subnet ${AZ} - ${VPC}', { 'AZ': !Select [2, !GetAZs ""], 'VPC': !Ref Vpc }]

  PublicSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3


  # SSM Parameters
  VpcIdSsmParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/org/networking/VpcId'
      Type: 'String'
      Description: 'VPC ID'
      Value: !Ref Vpc

  VpcCidrSsmParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/org/networking/VpcCidr'
      Type: 'String'
      Description: 'VPC CIDR block'
      Value: !Ref VpcCidr

  VpcPublicSubnetsSsmParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/org/networking/VpcPublicSubnets'
      Type: 'StringList'
      Description: 'VPC public subnets'
      Value: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]

  VpcPrivateSubnetsSsmParam:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: '/org/networking/VpcPrivateSubnets'
      Type: 'StringList'
      Description: 'VPC private subnets'
      Value: !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3]]